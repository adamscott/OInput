{"name":"OInput","tagline":"One script to ease input issues with Unity's built-in Input class.","body":"Quick start\r\n----------------\r\n\r\n### C&#35;\r\n```csharp\r\nvoid Start() {\r\n\tOInput.GetDefaultProfile()\r\n\t\t.SetButton(\"Jump\", \"space\")\r\n\t\t.SetButton(\"Fireball\", \"left ctrl\");\r\n}\r\n\r\nvoid Update() {\r\n\tif (OInput.GetDefaultProfile().GetButton(\"Jump\")) {\r\n\t\tDebug.Log(\"The plumber jumps.\");\r\n\t}\r\n\t\r\n\tif (OInput.GetDefaultProfile().GetButton(\"Fireball\")) {\r\n\t\tDebug.Log(\"The plumber throws a fireball.\");\r\n\t}\r\n}\r\n```\r\n\r\n### Unity Script\r\n```javascript\r\nfunction Start () {\r\n\tOInput.GetDefaultProfile()\r\n\t\t.SetButton(\"Jump\", \"space\")\r\n        .SetButton(\"Fireball\", \"left ctrl\");\r\n}\r\n\r\nfunction Update () {\r\n\tif (OInput.GetDefaultProfile().GetButton(\"Jump\")) {\r\n        Debug.Log(\"The plumber jumps.\");\r\n    }\r\n\t\r\n    if (OInput.GetDefaultProfile().GetButton(\"Fireball\")) {\r\n        Debug.Log(\"The plumber throws a fireball.\");\r\n    }\r\n}\r\n```\r\n\r\nFeatures\r\n----------------\r\n### Runtime actions\r\n`OInput` class lets you set actions in your own code; no longer tied-up to axes setup in the project settings.\r\n\r\n```csharp\r\npublic Transform neck;\r\n\r\nvoid Start() {\r\n\tOInput.GetDefaultProfile()\r\n\t\t.SetAxis(\"StretchingNeck\", \"joystick 1 axis 1\");\r\n}\r\n\r\nvoid Update() {\r\n\tneck.Rotate(0, OInput.GetDefaultProfile().GetAxis(\"StretchingNeck\") * 90 /* degrees */, 0);\r\n}\r\n\r\n```\r\n\r\n### Accepts both string parameters and built-in ones\r\n```csharp\r\n// These lines ...\r\nOInput.GetDefaultProfile().SetButton(\"Jump\", \"space\");\r\nOInput.GetDefaultProfile().SetAxis(\"Horizontal\", \"joystick 1 axis 1\");\r\n// work as well as ...\r\nOInput.GetDefaultProfile().SetButton(\"Jump\", KeyCode.Space);\r\nOInput.GetDefaultProfile().SetAxis(\"Horizontal\", OInput.Axis.Joystick1Axis1);\r\n```\r\n\r\n### Profiles\r\n#### Multiple profiles\r\nSetting up multiple ways to control a character is easy with the OInput's profiles.\r\n```csharp\r\nvoid Start () {\r\n\t// Sets the \"Goofy\" profile.\r\n\tOInput.GetProfile(\"Goofy\")\r\n\t\t.SetButton(\"UltraMegaFlip\", KeyCode.Space);\r\n\t\r\n\t// Sets the \"Regular\" profile.\r\n\tOInput.GetProfile(\"Regular\")\r\n\t\t.SetButton(\"UltraMegaFlip\", KeyCode.LeftControl);\r\n\t\r\n\t// Let's say the user chooses the \"Goofy\" profile.\r\n\tOInput.GetProfile(\"Goofy\").SetAsDefault();\r\n}\r\n\r\nvoid Update () {\r\n\t// The boarder will shout when the player releases the space key.\r\n\tif (OInput.GetDefaultProfile().GetButtonUp(\"UltraMegaFlip\")) {\r\n\t\tDebug.Log(\"Yeeeaaaaahhhhhhhh!\");\r\n\t}\r\n}\r\n```\r\n\r\n#### Profile persistence\r\n```csharp\r\nvoid Start() {\r\n\t// Checks if the profile has saved data in the preferences (PlayerPrefs)\r\n\tif (OInput.GetDefaultProfile().hasSavedData) {\r\n\t\tOInput.GetDefaultProfile()\r\n\t\t\t.SetAxis(\"Horizontal\", \"joystick 1 axis 1\")\r\n\t\t\t.Save(); // Saves through PlayerPrefs settings\r\n\t\t\r\n\t\tOInput.GetDefaultProfile()\r\n\t\t\t.Clear() // Clear() method clears all actions from a profile\r\n\t\t\t.SetAxis(\"NonImportantAxis\", \"joystick 3 axis 10\");\r\n\t}\r\n\t\r\n\t// Loads the saved profile from memory\r\n\tOInput.GetDefaultProfile()\r\n\t\t.Load();\r\n}\r\n\r\nvoid Update() {\r\n\t// As the default profile is loaded to it's previous state, \r\n\t// joystick 1 will be able to control the translation\r\n\tfloat translation = OInput.GetDefaultProfile().GetAxis(\"Horizontal\") * 10.0f;\r\n}\r\n```\r\n\r\n### Controllers\r\n#### Controller support\r\nAdding controller buttons and axis to actions has never been simpler. \r\n```csharp\r\nvoid Start() {\r\n\t// Setting up Player 1\r\n\tOInput.GetProfile(\"SpeedyHedgehog\")\r\n\t\t.SetButton(\"Jump\", KeyCode.Joystick1Button0)\r\n\t\t.SetAxis(\"Run\", OInput.Axis.Joystick1Axis1);\r\n\t\t\r\n\t// Setting up Player 2\r\n\tOInput.GetProfile(\"FoxWith2Tails\")\r\n\t\t.SetButton(\"Jump\", KeyCode.Joystick2Button0)\r\n\t\t.SetAxis(\"Run\", OInput.Axis.Joystick2Axis1);\r\n}\r\n```\r\n\r\n#### Controller wrappers\r\nThe wrappers can help setting up profiles for controller input without worring about axis and button numbers. Why? Because it preprocesses the input to be uniform whatever the platform the game runs.\r\n\r\nAs there is no consistency across controllers ([not even for the same controller across different platforms](http://wiki.unity3d.com/index.php?title=Xbox360Controller)), wrappers can be used to setup a project fast.\r\n\r\n| Controllers wrappers | Code          | Platforms    |\r\n| -------------------- | ------------- | ------------ |\r\n| Xbox 360 controller  | `OInput.Xbox` | Windows, Mac |\r\n| Ouya controller      | `OInput.Ouya` | Android      |\r\n\r\n```csharp\r\nvoid Start() {\r\n\tOInput.Xbox.GetWrapper(OInput.GetDefaultProfile())\r\n\t\t.SetJoystick(OInput.Joystick.Joystick1)\r\n\t\t.SetAxis(\"Horizontal\", OInput.Xbox.ControllerAxis.LeftStickX)\r\n\t\t.SetAxis(\"Vertical\", OInput.Xbox.ControllerAxis.LeftStickY)\r\n\t\t.SetAxis(\"AimHorizontal\", OInput.Xbox.ControllerAxis.RightStickX)\r\n\t\t.SetAxis(\"AimVertical\", OInput.Xbox.ControllerAxis.RightStickY)\r\n\t\t.SetButton(\"Jump\", OInput.Xbox.ControllerButton.A)\r\n\t\t.SetButton(\"Duck\", OInput.Xbox.ControllerButton.B);\r\n\t\r\n\t// Wrappers doesn't change the ability to call a profile which has been wrapped\r\n\tOInput.GetDefaultProfile()\r\n\t\t.SetButton(\"Jump\", \"space\")\r\n\t\t.SetAxis(\"Duck\", \"left ctrl\");\r\n}\r\n\r\nvoid Update() {\r\n\t// When the A button on the controller or the spacebar is pressed...\r\n\tif (OInput.GetDefaultProfile().GetButton(\"Jump\")) {\r\n\t\t// The character jumps.\r\n\t\tDebug.Log(\"Jumpin'!\");\r\n\t}\r\n}\r\n```\r\n\r\n### Buttons and axes\r\n\r\n#### Button and axis detection\r\nImplementing a prompt asking a user to press a key is quite easy with OInput.\r\n```csharp\r\nvoid Update() {\r\n\tif (OInput.DetectAxis() != OInput.Axis.None) {\r\n\t\tDebug.Log(OInput.DetectAxis() + \" has been activated.\");\r\n\t}\r\n\t\r\n\tif (OInput.DetectKeyDown() != KeyCode.None) {\r\n\t\tDebug.Log(OInput.DetectKeyDown() + \" has been just pressed.\");\r\n\t}\r\n\t\r\n\tif (OInput.DetectKey() != KeyCode.None) {\r\n\t\tDebug.Log(OInput.DetectKey() + \" has been pressed.\");\r\n\t}\r\n\t\r\n\tif (OInput.DetectKeyUp() != KeyCode.None) {\r\n\t\tDebug.Log(OInput.DetectKeyUp() + \" has been released.\");\r\n\t}\r\n}\r\n```\r\n\r\n#### Multiple ways to do axes\r\nNeeding a axis output of 0 to 1 instead of the classic -1 to 1? You want to implement a virtual axis by keypresses? Need to mix 2 joystick axes into one?\r\n```csharp\r\nvoid Start() {\r\n\tOInput.GetDefaultProfile()\r\n\t\t.SetAxis(\"SimpleAxis\", OInput.Axis.Joystick1Axis1) // the 3rd parameter of SetAxis is false by default\r\n\t\t.SetAxis(\"RemappedAxis\", OInput.Axis.Joystick1Axis2, true) // the 3rd parameter is for remapping or not\r\n\t\t.SetAxisKeys(\"VirtualAxis\", KeyCode.A, KeyCode.D)\r\n\t\t.SetAxisMix(\"AxisMix\", OInput.Axis.Joystick1Axis3, OInput.Axis.Joystick1Axis4);\r\n}\r\n\r\nvoid Update() {\r\n\tDebug.Log(\"SimpleAxis: \" + OInput.GetDefaultProfile().GetAxis(\"SimpleAxis\"));\r\n\t// Will log from -1 to 1\r\n\t\r\n\tDebug.Log(\"RemappedAxis: \" + OInput.GetDefaultProfile().GetAxis(\"RemappedAxis\"));\r\n\t// Will log from 0 to 1, -1 becomes 0, 0 becomes 0.5 and 1 stays 1.\r\n\t\r\n\tDebug.Log(\"VirtualAxis: \" + OInput.GetDefaultProfile().GetAxis(\"VirtualAxis\"));\r\n\t// Will log -1 when A key is pressed, 1 when D key is pressed, 0 when both or none of those is pressed.\r\n\t\r\n\tDebug.Log(\"AxisMix: \" + OInput.GetDefaultProfile().GetAxis(\"AxisMix\"));\r\n\t// Will log the sum of Joystick1Axis3 (mapped to 0 to -1) and Joystick1Axis4 (mapped to 0 to 1)\r\n}\r\n```\r\n\r\nHow to install?\r\n----------------\r\n- [Download](https://github.com/adamscott/Unity-OInput/archive/master.zip) or clone the project.\r\n- Put the `OInput` folder in the `Assets/Standard Assets/Scripts` folder of your project. If the folder doesn't exists, create it.\r\n- Replace the `InputManager.asset` file in the `ProjectSettings` folder by the one you downloaded.\r\n\r\nIssues\r\n----------------\r\nDon't forget you can seek and fill issues in the project's [issue tracker](https://github.com/adamscott/Unity-OInput/issues).\r\n\r\n### Notable issues\r\n- OInput is **not compatible** with the [Input Manager](http://docs.unity3d.com/Documentation/Manual/Input.html) window.\r\n- `OInput.Profile.GetAxis()` and `OInput.Profile.GetRawAxis()` return the same values, as keyboard smoothing has not been implemented yet.\r\n- `OInput.Ouya` wrapper is not functionnal yet.\r\n- `OInput.Xbox` wrapper works only on Mac and Windows.\r\n\r\nPlanned features\r\n----------------\r\n- Complete Ouya controller support.\r\n- Keyboard axis smoothing.\r\n- Detect input overlap between profiles.\r\n- Set a joystick axis input as a button.\r\n\r\nVersion history\r\n----------------\r\n| Version | Release date  | Release notes                                          |\r\n| ------- | ------------- | ------------------------------------------------------ |\r\n| v0.1    | June 1st 2013 | N/A                                                    |\r\n\r\nWhat does OInput stands for?\r\n----------------\r\nOriginally intended to be called OpenInput, the project/file has been quickly renamed OInput for the sake of usability.\r\n\r\nNotes\r\n----------------\r\n- `InputManager.asset` as been borrowed from the \r\n[ouya-unity-plugin project](https://github.com/ouya/ouya-unity-plugin) for (the awesome) \r\n[Ouya](http://ouya.tv/ \"I want one!\"). Thanks to \r\n[Tim Graupmann](https://twitter.com/tgraupmann \"@tgraupmann on Twitter\") and the \r\n[Ouya Dev Team](https://devs.ouya.tv/developers). Visit the project's website: `https://github.com/ouya/ouya-unity-plugin`\r\n- OInput is released under [Apache License 2.0](https://raw.github.com/adamscott/OInput/master/LICENSE.txt).\r\n","google":"UA-41284418-1","note":"Don't delete this file! It's used internally to help with page regeneration."}