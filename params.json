{"name":"OInput","tagline":"One script to ease input issues with Unity's built-in `Input` class.","body":"How to use?\r\n----------------\r\n\r\n```csharp\r\nvoid Start() {\r\n\tOInput.GetDefaultProfile()\r\n\t\t.SetAxis(\"Horizontal\", \"a\", \"d\")\r\n\t\t.SetAxis(\"Vertical\", \"w\", \"d\")\r\n\t\t.SetButton(\"Jump\", \"space\");\r\n}\r\n\r\nvoid Update() {\r\n\ttransform.position += Time.deltaTime * new Vector3(\r\n\t\tOInput.GetDefaultProfile().GetAxis(\"Horizontal\"),\r\n\t\t0,\r\n\t\tOInput.GetDefaultProfile().GetAxis(\"Vertical\"));\r\n        \r\n\tif (OInput.GetDefaultProfile().GetButton(\"Jump\")) {\r\n\t\trigidbody.AddForce(Vector3.up * speed, ForceMode.Impulse);\r\n\t}\r\n}\r\n```\r\n\r\nFeatures\r\n----------------\r\n### Runtime actions\r\n`OInput` class lets you set actions in your own code; no longer tied-up to axes setup in the Input Manager in the Unity editor.\r\n\r\n```csharp\r\nvoid Start() {\r\n\tOInput.GetDefaultProfile()\r\n\t\t.SetAxis(\"Horizontal\", \"joystick 1 axis 1\")\r\n\t\t.SetAxis(\"Vertical\", \"joystick 1 axis 2\");\r\n}\r\n```\r\n\r\n### Profiles\r\n```csharp\r\nvoid Start() {\r\n\tOInput.GetProfile(\"Player1\").SetButton(\"Jump\", KeyCode.Space);\r\n\tOInput.GetProfile(\"Player2\").SetButton(\"Jump\", KeyCode.Z);\r\n}\r\n```\r\n\r\n### Controller support\r\n```csharp\r\nvoid Start() {\r\n\tOInput.GetDefaultProfile()\r\n\t\t.SetButton(\"Jump\", KeyCode.Joystick1Button0)\r\n\t\t.SetAxis(\"Horizontal\", OInput.Axis.Joystick1Axis1);\r\n}\r\n```\r\n\r\n### Button and axis detection\r\nAlways wanted to implement a prompt asking a user to press a key?\r\n```csharp\r\nvoid Update() {\r\n\tif (OInput.DetectAxis() != OInput.Axis.None) {\r\n\t\tDebug.Log(OInput.DetectAxis() + \" has been activated.\");\r\n\t}\r\n\t\r\n\tif (OInput.DetectKeyDown() != KeyCode.None) {\r\n\t\tDebug.Log(OInput.DetectKeyDown() + \" has been just pressed.\");\r\n\t}\r\n\t\r\n\tif (OInput.DetectKey() != KeyCode.None) {\r\n\t\tDebug.Log(OInput.DetectKey() + \" has been pressed.\");\r\n\t}\r\n\t\r\n\tif (OInput.DetectKeyUp() != KeyCode.None) {\r\n\t\tDebug.Log(OInput.DetectKeyUp() + \" has been released.\");\r\n\t}\r\n}\r\n```\r\n\r\n### Controller wrappers\r\nThe wrappers can help setting up profiles for controller input without worring about axis and button numbers. As there is no consistency across controllers ([not even for the same controller across different platforms](http://wiki.unity3d.com/index.php?title=Xbox360Controller)), wrappers can be used to setup a project fast.\r\n\r\n```csharp\r\nvoid Start() {\r\n\tOInput.Xbox.GetWrapper(OInput.GetDefaultProfile())\r\n\t\t.SetJoystick(OInput.Joystick.Joystick1)\r\n\t\t.SetAxis(\"Horizontal\", OInput.Xbox.ControllerAxis.LeftStickX)\r\n\t\t.SetAxis(\"Vertical\", OInput.Xbox.ControllerAxis.LeftStickY)\r\n\t\t.SetAxis(\"AimHorizontal\", OInput.Xbox.ControllerAxis.RightStickX)\r\n\t\t.SetAxis(\"AimVertical\", OInput.Xbox.ControllerAxis.RightStickY)\r\n\t\t.SetButton(\"Jump\", OInput.Xbox.ControllerButton.A)\r\n\t\t.SetButton(\"Duck\", OInput.Xbox.ControllerButton.B);\r\n}\r\n```\r\n\r\n### Accepts both `string` parameters and built-in ones\r\n```csharp\r\n// These lines ...\r\nOInput.GetDefaultProfile().SetButton(\"Jump\", \"space\");\r\nOInput.GetDefaultProfile().SetAxis(\"Horizontal\", \"joystick 1 axis 1\");\r\n// work as well as ...\r\nOInput.GetDefaultProfile().SetButton(\"Jump\", KeyCode.Space);\r\nOInput.GetDefaultProfile().SetAxis(\"Horizontal\", OInput.Axis.Joystick1Axis1);\r\n```\r\n\r\nWhat OInput stands for?\r\n----------------\r\nOriginally intended to be called OpenInput, the project/file has been quickly renamed OInput for usability.\r\n\r\nHow to install?\r\n----------------\r\n- Put the `OInput` folder in the `Assets/Standard Assets/Scripts` folder of your project. If the folder doesn't exists, create it.\r\n- Replace the `InputManager.asset` file in the `ProjectSettings` of your project by the one of OInput.\r\n\r\nIssues\r\n----------------\r\n- `OInput.Profile.GetAxis()` and `OInput.Profile.GetRawAxis()` return the same values, as keyboard smoothing has not been implemented yet.\r\n- `OInput.Ouya` wrapper is not functionnal yet.\r\n- `OInput.Xbox` wrapper works only on Mac and Windows.\r\n\r\nNotes\r\n----------------\r\n- `InputManager.asset` as been borrowed from the \r\n[ouya-unity-plugin project](https://github.com/ouya/ouya-unity-plugin) for (the awesome) \r\n[Ouya](http://ouya.tv/ \"I want one!\"). Thanks to \r\n[Tim Graupmann](https://twitter.com/tgraupmann \"@tgraupmann on Twitter\") and the \r\n[Ouya Dev Team](https://devs.ouya.tv/developers). Visit the project's website: `https://github.com/ouya/ouya-unity-plugin`\r\n","google":"UA-41284418-1","note":"Don't delete this file! It's used internally to help with page regeneration."}